<!--VARIABLES {"title": "Embedded server", "SORT_ORDER": "030", "code": "embedded_server"}-->

[TOC]

[4]: <!--page refs-->#ref_4
[20]: <!--page refs-->#ref_20
[20.1]: <!--page refs-->#ref_20_1
[23]: <!--page refs-->#ref_23

----------------------------------------------------------------------------------------------------
May 7, 2023

# About this section

This section is intended for discussion on different ways of embedded server setup with Spring MVC.

The topic doesn't look to be simple and straightforward. There are quite many materials on the 
Internet but they all probably cover the simplest use cases and contain very little or no 
descriptions and explanations. Some of the materials are listed in [[23][]] and [[20][]].

Here some certain setups are going to be implemented and explored.

----------------------------------------------------------------------------------------------------
<!--index ["live WAR"]-->
# Jetty live WAR with JSP

This implementation is made based on the material [[20.1][]]. The project is declared as being for
investigation purpose. It uses custom class loader, `maven-dependency-plugin` and probably some
other solutions that make it unstable and add problems when using in production.

The following features were added:

- Spring MVC support;
- JSP support;
- necessary resource access restrictions.

Also see the StackOverflow question "[How to enable JSP in a Jetty server in a JAR file?](
https://stackoverflow.com/questions/65637135/how-to-enable-jsp-in-a-jetty-server-in-a-jar-file)", 
[this answer](https://stackoverflow.com/a/65637665/3868454).

The project may be built and run:

- as a WAR file in a separate Servlet container;
- as an executable JAR file (with no Servlet container required);
- by running the executable main class inside IntelliJ IDEA IDE.

Build directory is changed in the projects to move the generated artifacts out of the study notes
directory:

````xml
    ...
    <build>
        <directory>${TMP_MAVEN_BUILDS_DIR}${project.parent.artifactId}/${project.artifactId}</directory>
    ...
````


## Creating standard WAR application

[This instructions](<!--page server_setup-->) were used.

> Git commit: [`234605b0cbf55d1dc956b1ee06843bb72abeb7ea`](
> <!--path patches-->234605b0cbf55d1dc956b1ee06843bb72abeb7ea.html)
> embedded jetty: life war - before embedding

Further modifications and improvements are going to be done in the next subsections.

Just execute `mvn clean package` to build the project. Also see 
[here](<!--page server_setup-->#project_start_on_server) for instructions on deployment and
running.


## Converting into multi module Maven project

Just multi module structure created. Live WAR elements will be added later.

> Git commit: [`65666bbcaa8ee2a849ae57eba44dea629a3f7eb3`](
> <!--path patches-->65666bbcaa8ee2a849ae57eba44dea629a3f7eb3.html)
> web application converted into a module

Executing `mvn clean package` for the parent project will generate the WAR file `my-webapp.war`
the same way as in the previous version.


## Adding live WAR elements

> Git commit: [`6050a18e8235df32b09f73b75b5b76160434db0c`](
> <!--path patches-->6050a18e8235df32b09f73b75b5b76160434db0c.html)
> live WAR implemented
> 
> Git commit: [`c12f1479711095c55db1d715ed7177c86445a333`](
> <!--path patches-->c12f1479711095c55db1d715ed7177c86445a333.html)
> life WAR small change

The following are the Maven modules described:

- `my-webapp` --- the standard web application that is packaged as a WAR file.
- `jetty_server` --- the Jetty server that runs the above web application. It's also used for
    for running the web application from inside an IDE (only IntelliJ IDEA was tested).
- `server_bootstrap` --- the module that starts the server from inside the live WAR file.
- `livewar_assembly` --- the module that uses the other modules and generates the final 
    live WAR file.

The build is done by executing `mvn clean package` for the parent project.

The generated artifact is the file `my-webapp-livewar.war`.

Also see [here](<!--page server_setup-->#project_start_on_server) for instructions on deployment
and running.

Running as a JAR file is done the following way:

````shell
>java -jar livewar_assembly\my-webapp-livewar.war
...
2023-05-10 13:41:51.825:INFO:oejs.Server:main: Started @4803ms
````

In IntelliJ IDEA the class `jettylivewar.starter.ServerMain` from the project `jetty_server`
may be used for running and debugging the project.

Remote debugging may be done using the instructions
[here](<!--page sidesteps-->#remote_server_debugging). Some additional output is added when 
the option `-Ddebug=true` is used.

The main page is accessible at <http://localhost:8080/>:

![](<!--path pict-->live_war_main_page.png)


## Discussions and explanations

**Adding Spring MVC**

In the `my-webapp` module Spring MVC is added by adding the configuration classes 
`MyApplicationInitializer` and `MyApplicationConfig` and the controller class `HelloController`.
There are some detailed explanations [here](<!--page get_rid_of_web_xml-->). When run in a servlet
container this configuration is found automatically.

In the `jetty_server` module the following class list adjustment is used in the class
[`ServerMain`](
<!--wrap_java jetty-embedded-live-war/jetty_server/src/main/java/jettylivewar/starter/ServerMain.java-->):

<a name="adjusting_configuration_class_list"></a>
````code
        ...
        Configuration.ClassList classlist = Configuration.ClassList
                .setServerDefault(server);
        classlist.addBefore(
                "org.eclipse.jetty.webapp.JettyWebXmlConfiguration",
                "org.eclipse.jetty.annotations.AnnotationConfiguration");
        ...
````

<!--index ["JSP, support"]-->
**Adding JSP support**

[](https://www.eclipse.org/jetty/documentation/jetty-9/index.html#configuring-jsp)

When the WAR file is run in the Jetty servlet container, JSP support is done externally by the
Jetty's `jsp ` module (also see [here](<!--page server_setup-->#activate_jetty_jsp_module)).
No other actions required inside the standard WAR file.

In the live WAR artifact when running standalone, the 
[above adjustments](<!--page embedded_server-->#adjusting_configuration_class_list) are required.
Also there's a special procedure `enableEmbeddedJspSupport()` in the helper class 
[`JspSupportEnablingHelper`](
<!--wrap_java jetty-embedded-live-war/jetty_server/src/main/java/jettylivewar/starter/JspSupportEnablingHelper.java-->)
that is called from the `ServerMain` class and fulfills all the adjustments.


**Security adjustments**

The demonstrated adjustments just cover the obvious breach caused by the dual nature of the
generated WAR file that also works as an executable JAR. The server bootstrap classes in the
directory `jettylivewar` are by default accessible to the web clients. The solution was made
to forbid this directory using `<security-constraint>` tag in the file [`web.xml`](
<!--wrap_xml jetty-embedded-live-war/my-webapp/src/main/webapp/WEB-INF/web.xml-->).

````xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <context-param>
        <param-name>org.eclipse.jetty.servlet.Default.dirAllowed</param-name>
        <param-value>false</param-value>
    </context-param>

    <security-constraint>
        <web-resource-collection>
            <web-resource-name>Restricted folders</web-resource-name>
            <url-pattern>/jettylivewar/*</url-pattern>
            <url-pattern>/META-INF/*</url-pattern>
            <url-pattern>/WEB-INF/*</url-pattern>
        </web-resource-collection>
        <auth-constraint />
    </security-constraint>

</web-app>
````

<!--index ["directory listing"]-->
Also directory listing was disabled using the parameter `dirAllowed`.

There's also an alternative solution by setting equivalent restrictions programmatically --- 
see the method `applyRestrictions()` in the `ServerMain` class. This solution is preserved in
the code for information purpose but it cannot be used in this project because the live WAR 
file may also be called as a regular WAR file. So the possible solutions may be:

- to set these restrictions in the Spring MVC configuration (not tried yet);
- to use a traditional `web.xml` configuration (the accepted option).

Also see this [related topic](<!--page jetty_server_notes-->#default_protected_targets).

----------------------------------------------------------------------------------------------------
<!--index ["warless embedded Jetty server"]-->
# WARless JAR with JSP (incomplete)

The following attempt was done to create an executable JAR with embedded Jetty server and JSP
support. This result was achieved but only when the project is run in the IntelliJ Idea IDE.
When run inside a package it doesn't work.

> Git commit: [`3944bb1851bdffd9f40e525e4f8abd573bc7c66c`](
> <!--path patches-->3944bb1851bdffd9f40e525e4f8abd573bc7c66c.html)
> Embedded Jetty WARless packaging implemented (incomplete)

Navigate to <localhost:8080> to see the result.

The main difference between the IDE and self contained versions is probably in the following
setting (class [`Main`](
<!--wrap_java jetty-embedded-warless/src/main/java/jettywarless/Main.java-->)):

````code
...
webAppContext.setExtraClasspath(appClasspath);
...
````

Inside the IDE the value is like `file:/X:/path/to/jetty-embedded-warless/classes/`, but when 
running as the executable JAR it's like 
`file:/X:/path/to/jetty-embedded-warless/jetty-embedded-warless-1.0-SNAPSHOT.jar`.

So in the latter case much more classes fall into the initialization scope. The problem may 
probably be solved by restricting the web application context class path, but a method for this
was not found yet.

The [answer](https://stackoverflow.com/a/48932175/3868454) to the StackOverflow question 
[jetty embedded jsp issues](https://stackoverflow.com/questions/48928954/jetty-embedded-jsp-issues)
may be notable for understanding the perspectives:

> You have to setup JSP for Jetty, the mere existence of the JARs is insufficient.
> 
> ...
> 
> Finally, some things you need to consider with JSP/JSTL/EL support:
> 
> * Don't bundle up in OSGi (the JSTL/EL/Standard libraries do not support this usage. mainly
>   due to classloader expectations)
> * Don't use Java 9+ JPMS modules (the JSTL/EL/Standard libraries do not support this usage,
>   mainly due to classloader expectations, and resource url expecations)
> * Don't create an uber jar (the JSTL/EL/Standard libraries do not support this)
> * Don't repackage the JSTL jars in any way, they need to stay as the JSTL/EL/Standard jars,
>   available on the filesystem.
> * Don't create custom classloaders. (The JSTL/EL/Standard libraries expect a very narrow
>   definition of a Classloader)

**Conclusions**

- This method may be used if JSP is not required, like servlets with `@ResponseBody` or REST.
- JSP is a hard technology to be set up and adjusted (at least with Jetty), and it must be avoided
    wherever and whenever it's possible.




