<!--VARIABLES {"title": "View resolver", "SORT_ORDER": "070",
"code": "view_resolver"}-->

[TOC]

[1.8]: <!--page refs-->#ref_1_8
[19]: <!--page refs-->#ref_19

----------------------------------------------------------------------------------------------------
Mar 20, 2023

# Materials

[[1.8][]]


----------------------------------------------------------------------------------------------------
# Specifying direct view file location

Now we create a new controller [`JspHelloController`](
<!--path code-->web-app-spring/src/main/java/springmvcstudy/controllers/JspHelloController.java):

````code
@Controller
@RequestMapping("/jsp")
public class JspHelloController {

    @RequestMapping("/hello")
    public String getJspHello() {
        return "/view/jspHello.jsp";
    }
}
````

Here we remove the `@ResponseBody` annotation that will instruct the Spring MVC framework that
the method return value is not the exact page content but the view file location instead.

A simple JSP file [`src/main/webapp/view/jspHello.jsp`](
<!--path code-->web-app-spring/src/main/webapp/view/jspHello.jsp)
is created:

````xml
<html><body>
<h2>Hello from JSP!</h2>
<p>The generated servlet class is:
<code><%= this.getClass().getSimpleName() %><code></p>
</body></html>
````

!!! important
    In the file [`web.xml`](<!--path code-->web-app-spring/src/main/webapp/WEB-INF/web.xml)
    make sure that servlet mapping URL pattern is `/`, not `/*`:

    ````xml
        .  .  .
        <servlet-mapping>
            <servlet-name>front-controller</servlet-name>
            <url-pattern>/</url-pattern>
        </servlet-mapping>
        .  .  .
    ````
    
    Otherwise the Jetty server shows error 404 in the browser and puts the following error
    in the log:
    
    ````wrapped-shell-error
    Mar 20, 2023 11:05:12 AM org.springframework.web.servlet.DispatcherServlet noHandlerFound
    WARNING: No mapping for GET /web-app-spring/view/jspHello.jsp
    ````
    
    <!--index ["URL mapping"]-->
    Also see [[19][], look for "12.2 Specification of Mappings"]:
    
    > In the Web application deployment descriptor, the following syntax is used to define
    > mappings:
    >
    > - A string beginning with a `/` character and ending with a `/*` suffix is used for
    >     path mapping.
    > - A string beginning with a `*.` prefix is used as an extension mapping.
    > - The empty string ("") is a special URL pattern that exactly maps to the
    >     application's context root, i.e., requests of the form 
    >     `http://host:port/<context-root>/`. In this case the path info is `/` and the servlet
    >     path and context path is empty string ("").
    > - A string containing only the `/` character indicates the "default" servlet of the
    >     application. In this case the servlet path is the request URI minus the context path
    >     and the path info is null.
    > - All other strings are used for exact matches only.
    > 
    > If the effective `web.xml` (after merging information from fragments and
    > annotations) contains any url-patterns that are mapped to multiple servlets then the
    > deployment must fail.

After navigating to <http://localhost:8080/web-app-spring/jsp/hello> we see:

![](<!--path pict-->using_view_location.png)


## Why this is bad

This approach doesn't use the standard Spring MVC view resolution mechanism.
The view location is hard coded in the controller and reflects in the page URL. If, for any reason,
the view file location is changed it will need corresponding changes in different parts of the code.
Also we are tied to (in this case) to the JSP technology and it will need a lot of work to switch to 
the other ones.

!!! note
    JSP pages are processed by the Jetty `jsp` module added when the server was initially adjusted.
    If the file `%JETTY_BASE%\start.d\jsp.ini` is removed the following error will be logged when
    a JSP page is accessed:
    
    ````wrapped-shell-error
    2023-03-20 12:28:26.293:INFO:oejshC.web_app_spring:qtp2101842856-13: No JSP support.  Check that JSP jars are in lib/jsp and that the JSP option has been specified to start.jar
    ````

> Git commit: [`3b6bcc77547cec07f7bfc289702d8617a92830fc`](
> <!--path patches-->3b6bcc77547cec07f7bfc289702d8617a92830fc.html)
> specifying direct view file location

----------------------------------------------------------------------------------------------------
<!--index ["view resolver"]-->
# Using view resolver

[[1.8][], [18:38](https://youtu.be/5_G1jIiK2hI?t=1118)]

The main idea may be described like this: we have a view file location, e.g. `/view/helloView.jsp`,
but the controller method returns just an internal part of this location or a *base name*,
like `helloView`.

![](<!--path pict-->view_resolver.png)

The *view resolver* prepends and appends the *base name* with the **prefix** and the **suffix**
and returns the full view location.

In Spring MVC the view resolver class is 
`org.springframework.web.servlet.view.InternalResourceViewResolver`.

So in the dispatcher servlet configuration file [`front-controller-servlet.xml`](
<!--path code-->web-app-spring/src/main/webapp/WEB-INF/front-controller-servlet.xml)
we add the following bean:

````xml
    .  .  .
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/view/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    .  .  .
````

And in the controller [`JspHelloController`](
<!--path code-->web-app-spring/src/main/java/springmvcstudy/controllers/JspHelloController.java)
we change the return value from `/view/jspHello.jsp` to `jspHello`:

````code
    .  .  .
    @RequestMapping("/hello")
    public String getJspHello() {
        return "jspHello";
    }
    .  .  .
````

After that, navigating to <http://localhost:8080/web-app-spring/jsp/hello> gives the same result.

But now if the view directory changes it will require readjustment in only one place.

> Git commit: [`6000f8381a2cabcb82a98ded3f42ccb47368e722`](
> <!--path patches-->6000f8381a2cabcb82a98ded3f42ccb47368e722.html)
> view resolver introduced






