<!--VARIABLES {"title": "Get rid of XML configuration", "SORT_ORDER": "020", 
"code": "get_rid_of_web_xml"}-->

[TOC]

[2.4]: <!--page refs-->#ref_2_4
[2.5]: <!--page refs-->#ref_2_5
[6]: <!--page refs-->#ref_6
[19]: <!--page refs-->#ref_19

----------------------------------------------------------------------------------------------------
Mar 22, 2023

# Project setup

[[2.4][], [0:53](https://youtu.be/Hk7fRv-GHpM?t=53)]

The complete instructions may be found 
[here](<!--page server_setup-->#initialize_web_maven_project).
The following is the particular customized command:

````wrapped-shell
>mvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-webapp -DarchetypeVersion=1.4 -DgroupId=world.someone -DartifactId=web-app-spring-adv1 -DinteractiveMode=false
````

Some simple cleaning and reformatting is done. After building and deploying the application 
the request to <http://localhost:8080/web-app-spring-adv1/> returns our desired hello page.

> Git commit: [`20f92ab17fcfe69cabd79a6f953e2e6f609ef94d`](
> <!--path patches-->20f92ab17fcfe69cabd79a6f953e2e6f609ef94d.html)
> first advanced web application initialized

----------------------------------------------------------------------------------------------------
<!--index ["WebApplicationInitializer interface"]-->
# Introduce `WebApplicationInitializer`

In this section we are going to get rid of the `web.xml` file. But as this file is a key element
of a web application, we need to replace it with something that will take up these functions.

!!! hint
    There's a quicker way of a dispatcher servlet initialization described
    [here](<!--page get_rid_of_web_xml-->#quicker_web_application_initializer).

The Servlet standard of versions 3.0 and later defines this mechanism by detecting the
implementations of the `WebApplicationInitializer` interface. This interface has a method 
`public void onStartup(ServletContext servletContext)` that is called on the web application
initialization. This method allows defining and setting a dispatcher servlet into the 
provided `ServletContext` instance.

For more details see:

- The Spring MVC documentation [[6][], [1.1. DispatcherServlet](
    https://docs.spring.io/spring-framework/docs/5.3.9/reference/html/web.html#mvc-servlet), and 
    [1.1.4. Servlet Config](
    https://docs.spring.io/spring-framework/docs/5.3.9/reference/html/web.html#mvc-container-config)]
- The Javadocs of classes: [`javax.servlet.ServletContext`](
    https://tomcat.apache.org/tomcat-8.0-doc/servletapi/javax/servlet/ServletContext.html) and
    [`org.springframework.web.WebApplicationInitializer`](
    https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/WebApplicationInitializer.html)

[[2.4][], [4:11](https://youtu.be/Hk7fRv-GHpM?t=251)]

If we just delete the `web.xml` file, the Maven build will complain:

````wrapped-shell-error
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-war-plugin:2.2:war (default-war) on project web-app-spring-adv1: Error assembling WAR: webxml attribute is required (or pre-existing WEB-INF/web.xml if executing in update mode)
````

The following steps are going to be done to fix this:

- Add the Spring MVC dependency:

    ````xml
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>
    ````
    
    The version is `5.3.9` as for now. Also see the complete
    [`pom.xml`](<!--wrap_xml web-app-spring-adv1/pom.xml-->) file.
    
- Create the web application initializer class [`MyApplicationInitializer`](
    <!--wrap_java web-app-spring-adv1/src/main/java/springmvcstudy2/config/MyApplicationInitializer.java-->)
    that implements the `org.springframework.web.WebApplicationInitializer` interface.
    For the first simple attempt we just log the fact of calling the `onStartup` method.
    
- In order to implement the `WebApplicationInitializer` class we need to add the Servlet API 
    dependency:
    
    ````xml
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
            <scope>provided</scope>
        </dependency>
    ````

- <!--index ["failOnMissingWebXml"]-->In order to avoid the "webxml attribute is required" error
    (see above) we need to add the corresponding configuration into our `maven-war-plugin`
    definition:
    
    ````xml
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.3.2</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
    ````
    
    !!! note
        Also the `failOnMissingWebXml` parameter may be specified in the POM's `properties`
        section just the same way it's done in the plugin definition.

After building, deploying and running our application in the Jetty server we see the following 
in the server log:

````wrapped-shell
2023-03-22 16:45:14.894:INFO:oejshC.web_app_spring_adv1:main: 1 Spring WebApplicationInitializers detected on classpath
WebApplicationInitializer introduced!
````

[[2.4][], [14:36](https://youtu.be/Hk7fRv-GHpM?t=876)]

So as we can see the `MyApplicationInitializer` class was successfully detected and called. 
The URL <http://localhost:8080/web-app-spring-adv1/> returns the same hello page.

> Git commit: [`739f7315adc191045fa7fa18d5b4e0a291445974`](
> <!--path patches-->739f7315adc191045fa7fa18d5b4e0a291445974.html)
> MyApplicationInitializer introduced

Here's a small investigation result:

- There's the `javax.servlet.ServletContainerInitializer` interface in the Maven artifact 
    `javax.servlet:javax.servlet-api:3.1.0`.
- This interface is implemented by the `org.springframework.web.SpringServletContainerInitializer`
    class from the Maven artifact `org.springframework:spring-web:5.3.9`.
    
Also see [[19][], look for "4.4 Configuration methods"].

----------------------------------------------------------------------------------------------------
# Adjust dispatcher servlet

The dispatcher servlet is created and adjusted the following way (the class is 
[`MyApplicationInitializer`](
<!--wrap_java web-app-spring-adv1/src/main/java/springmvcstudy2/config/MyApplicationInitializer.java-->)):

````code
public class MyApplicationInitializer implements WebApplicationInitializer {

    @Override
    public void onStartup(ServletContext servletContext) throws ServletException {

        XmlWebApplicationContext webApplicationContext = new XmlWebApplicationContext();
        webApplicationContext.setConfigLocation("classpath:application-config.xml");

        DispatcherServlet dispatcherServlet = new DispatcherServlet(webApplicationContext);

        ServletRegistration.Dynamic registration =
                servletContext.addServlet("front-controller", dispatcherServlet);

        registration.setLoadOnStartup(1);
        registration.addMapping("/ui/*");
    }
}
````

So by now we've reproduced all the configuration we did with the `web.xml` file.

On application start the following output is shown in the console:

````wrapped-shell
.  .  .
2023-03-22 19:18:23.786:INFO:oejshC.web_app_spring_adv1:main: Initializing Spring DispatcherServlet 'front-controller'
Mar 22, 2023 7:18:23 PM org.springframework.web.servlet.FrameworkServlet initServletBean
INFO: Initializing Servlet 'front-controller'
Mar 22, 2023 7:18:24 PM org.springframework.web.servlet.FrameworkServlet initServletBean
INFO: Completed initialization in 295 ms
.  .  .
````

For now we still use an XML dispatcher servlet configuration file, but we we are going to get rid
of it soon.

Now need to add a simple controller ([`HelloController`](
<!--wrap_java web-app-spring-adv1/src/main/java/springmvcstudy2/controllers/HelloController.java-->))
to check it works. After that the URL <http://localhost:8080/web-app-spring-adv1/ui/hello>
returns a page with content "Hi from the HelloController" (as it did in the previous part).

> Git commit: `91b4668344b892d362b95f6a45d10c915fbdb87e` dispatcher servlet and controller adjusted

----------------------------------------------------------------------------------------------------
# Get rid of Spring config XML file

[[2.4][], [36:06](https://youtu.be/Hk7fRv-GHpM?t=2166)]

New code-based configuration file [`MyApplicationConfig`](
<!--wrap_java web-app-spring-adv1/src/main/java/springmvcstudy2/config/MyApplicationConfig.java-->)
was created:

````code
@Configuration
@ComponentScan(basePackages = "springmvcstudy2.controllers")
public class MyApplicationConfig {
}
````

!!! note
    Although this configuration class is working for now, in the future the `@EnableWebMvc`
    will be required, so it's a good idea to add it now.

Than the above configuration class is used for initializing the dispatcher servlet web application
context (in the [`MyApplicationInitializer`](
<!--wrap_java web-app-spring-adv1/src/main/java/springmvcstudy2/config/MyApplicationInitializer.java-->)
file):

````code
        .  .  .
        AnnotationConfigWebApplicationContext webApplicationContext =
                new AnnotationConfigWebApplicationContext();
        webApplicationContext.register(MyApplicationConfig.class);
        .  .  .
````

The dispatcher servlet web application context XML file 
`/src/main/resources/application-config.xml` is deleted as it's not needed anymore.

> Git commit: [`02d7b2b6fec507fe75cb655595e6bcf96878f1d2`](
> <!--path patches-->02d7b2b6fec507fe75cb655595e6bcf96878f1d2.html)
> Spring XML configuration eliminated

----------------------------------------------------------------------------------------------------
# Create a view

[[2.4][], [43:50](https://youtu.be/Hk7fRv-GHpM?t=2630)]

In this section we create a view and tie it up with a controller and a view resolver.

The view is [`hello-page.jsp`](
<!--wrap_xml web-app-spring-adv1/src/main/webapp/view/hello-page.jsp-->) that is pretty much 
similar to the ones that were created in the beginner part.

The controller method is added in the [`HelloController`](
<!--wrap_java web-app-spring-adv1/src/main/java/springmvcstudy2/controllers/HelloController.java-->)
class:

````code
    .  .  .
    @RequestMapping("/hello-jsp")
    public String helloJsp() {
        return "hello-page";
    }
    .  .  .
````

<!--index ["view resolver, code-based"]-->
The view resolver is added as a bean into the [`MyApplicationConfig`](
<!--wrap_java web-app-spring-adv1/src/main/java/springmvcstudy2/config/MyApplicationConfig.java-->)
class:

````code
    .  .  .
    @Bean
    public InternalResourceViewResolver viewResolver() {
        InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();
        viewResolver.setPrefix("/view/");
        viewResolver.setSuffix(".jsp");
        return viewResolver;
    }
    .  .  .
````

The URL <http://localhost:8080/web-app-spring-adv1/ui/hello-jsp> is now returning the JSP hello
page:

![](<!--path pict-->hello_from_code_based.png)

> Git commit: [`f06feedadf46df06346b0dc9ead83ba80ec74b3a`](
> <!--path patches-->f06feedadf46df06346b0dc9ead83ba80ec74b3a.html)
> view created

----------------------------------------------------------------------------------------------------
<!--index ["AbstractAnnotationConfigDispatcherServletInitializer"]--><a 
name="quicker_web_application_initializer"></a>
# Quicker web application initializer

[[2.5][]], also see [[6][], [1.1.4. Servlet Config](
https://docs.spring.io/spring-framework/docs/5.3.9/reference/html/web.html#mvc-container-config)]

A web application initializer may extend the 
`org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer`
class instead of implementing the `org.springframework.web.WebApplicationInitializer`
interface. This let define configuration in a more declarative way when Spring MVC framework
takes up all responsibilities for doing actual initialization work.

In our application we are creating another initializer [`MyQuickApplicationInitializer`](
<!--wrap_java web-app-spring-adv1/src/main/java/springmvcstudy2/config/MyQuickApplicationInitializer.java-->):



[`MyQuickApplicationInitializer`]( 
<!--wrap_java web-app-spring-adv1/src/main/java/springmvcstudy2/config/MyQuickApplicationInitializer.java-->)



````code
public class MyQuickApplicationInitializer extends
        AbstractAnnotationConfigDispatcherServletInitializer {

    @Override
    protected Class<?>[] getRootConfigClasses() {
        return null;
    }

    @Override
    protected Class<?>[] getServletConfigClasses() {
        return new Class<?>[]{MyApplicationConfig.class};
    }

    @Override
    protected String[] getServletMappings() {
        return new String[]{"/ui/*"};
    }
}
````

The existing one (`MyApplicationInitializer`) is disabled by removing its `implements` clause.
On the server start the following output shows that the default dispatcher servlet name is 
`dispatcher`:

````wrapped-shell
2023-03-23 00:04:33.085:INFO:oejshC.web_app_spring_adv1:Scanner-0: 1 Spring WebApplicationInitializers detected on classpath
2023-03-23 00:04:33.133:INFO:oejshC.web_app_spring_adv1:Scanner-0: Initializing Spring DispatcherServlet 'dispatcher'
Mar 23, 2023 12:04:33 AM org.springframework.web.servlet.FrameworkServlet initServletBean
INFO: Initializing Servlet 'dispatcher'
Mar 23, 2023 12:04:33 AM org.springframework.web.servlet.FrameworkServlet initServletBean
INFO: Completed initialization in 585 ms
````

The application works the same way.

!!! note
    The `AbstractAnnotationConfigDispatcherServletInitializer` implements the
    `WebApplicationInitializer` interface.

> Git commit: [`be0c5837fbdf23dc7289411ade33fe51c88ba00a`](
> <!--path patches-->be0c5837fbdf23dc7289411ade33fe51c88ba00a.html)
> quicker dispatcher servlet initializer used

----------------------------------------------------------------------------------------------------
<!--index ["@Order"]-->
# Several initializers

Several implementations of the `WebApplicationInitializer` interface may exist in the class path
and all of them will be detected and used by the server. The 
`@org.springframework.core.annotation.Order` annotation may be used to define the initialization
order.

The experiment was done that proved that the lower value the `@Order` annotation has the earlier 
initialization is fulfilled.

The initializers overwriting details were not investigated.

> Git commit: [`fe0c5863eb2c9d27daab8056cd585baefe4d49ce`](
> <!--path patches-->fe0c5863eb2c9d27daab8056cd585baefe4d49ce.html)
> several initializers investigation

In the end the first initialized is reverted:

> Git commit: [`b6ad17d9a928baeecced8203fb08ce14a415bfcd`](
> <!--path patches-->b6ad17d9a928baeecced8203fb08ce14a415bfcd.html)
> the first initializer is reverted







