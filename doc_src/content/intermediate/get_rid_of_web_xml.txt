<!--VARIABLES {"title": "Get rid of web.xml", "SORT_ORDER": "020", "code": "get_rid_of_web_xml"}-->

[TOC]

[2.4]: <!--page refs-->#ref_2_4
[6]: <!--page refs-->#ref_6

----------------------------------------------------------------------------------------------------
Mar 22, 2023

# Project setup

[[2.4][], [0:53](https://youtu.be/Hk7fRv-GHpM?t=53)]

The complete instructions may be found 
[here](<!--page server_setup-->#initialize_web_maven_project).
The following is the particular customized command:

````wrapped-shell
>mvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-webapp -DarchetypeVersion=1.4 -DgroupId=world.someone -DartifactId=web-app-spring-adv1 -DinteractiveMode=false
````

Some simple cleaning and reformatting is done. After building and deploying the application 
the request to <http://localhost:8080/web-app-spring-adv1/> returns our desired hello page.

> Git commit: `51fce12a2a4326e07a0832e6ac1a215dda4117f4` first advanced web application initialized

----------------------------------------------------------------------------------------------------
<!--index ["WebApplicationInitializer interface"]-->
# Introduce `WebApplicationInitializer`

In this section we are going to get rid of the `web.xml` file. But as this file is a key element
of a web application, we need to replace it with something that will take up these functions.

The Servlet standard of versions 3.0 and later defines this mechanism by detecting the
implementations of the `WebApplicationInitializer` interface. This interface has a method 
`public void onStartup(ServletContext servletContext)` that is called on the web application
initialization. This method allows defining and setting a dispatcher servlet into the 
provided `ServletContext` instance.

For more details see:

- The Spring MVC documentation [[6][], [1.1. DispatcherServlet](
    https://docs.spring.io/spring-framework/docs/5.3.9/reference/html/web.html#mvc-servlet), and 
    [1.1.4. Servlet Config](
    https://docs.spring.io/spring-framework/docs/5.3.9/reference/html/web.html#mvc-container-config)]
- The Javadocs of classes: [`javax.servlet.ServletContext`](
    https://tomcat.apache.org/tomcat-8.0-doc/servletapi/javax/servlet/ServletContext.html) and
    [`org.springframework.web.WebApplicationInitializer`](
    https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/WebApplicationInitializer.html)

[[2.4][], [4:11](https://youtu.be/Hk7fRv-GHpM?t=251)]

If we just delete the `web.xml` file, the Maven build will complain:

````wrapped-shell-error
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-war-plugin:2.2:war (default-war) on project web-app-spring-adv1: Error assembling WAR: webxml attribute is required (or pre-existing WEB-INF/web.xml if executing in update mode)
````

The following steps are going to be done to fix this:

- Add the Spring MVC dependency:

    ````xml
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${org.springframework.version}</version>
        </dependency>
    ````
    
    The version is `5.3.9` as for now. Also see the complete
    [`pom.xml`](<!--path code-->web-app-spring-adv1/pom.xml) file.
    
- Create the web application initializer class [`MyApplicationInitializer`](
    <!--path code-->web-app-spring-adv1/src/main/java/springmvcstudy2/config/MyApplicationInitializer.java)
    that implements the `org.springframework.web.WebApplicationInitializer` interface.
    For the first simple attempt we just log the fact of calling the `onStartup` method.
    
- In order to implement the `WebApplicationInitializer` class we need to add the Servlet API 
    dependency:
    
    ````xml
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
            <scope>provided</scope>
        </dependency>
    ````

- In order to avoid the "webxml attribute is required" error (see above) we need to add the 
    corresponding configuration into our `maven-war-plugin` definition:
    
    ````xml
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.3.2</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
    ````

After building, deploying and running our application in the Jetty server we see the following 
in the server log:

````wrapped-shell
2023-03-22 16:45:14.894:INFO:oejshC.web_app_spring_adv1:main: 1 Spring WebApplicationInitializers detected on classpath
WebApplicationInitializer introduced!
````

[[2.4][], [14:36](https://youtu.be/Hk7fRv-GHpM?t=876)]

So as we can see the `MyApplicationInitializer` class was successfully detected and called. 
The URL <http://localhost:8080/web-app-spring-adv1/> returns the same hello page.

> Git commit: `64f362440b71925364539571eb69e54b1d4a68b4` MyApplicationInitializer introduced

----------------------------------------------------------------------------------------------------
# Adjust dispatcher servlet

The dispatcher servlet is created and adjusted the following way (the class is 
[`MyApplicationInitializer`](
<!--path code-->web-app-spring-adv1/src/main/java/springmvcstudy2/config/MyApplicationInitializer.java)):

````code
public class MyApplicationInitializer implements WebApplicationInitializer {

    @Override
    public void onStartup(ServletContext servletContext) throws ServletException {

        XmlWebApplicationContext webApplicationContext = new XmlWebApplicationContext();
        webApplicationContext.setConfigLocation("classpath:application-config.xml");

        DispatcherServlet dispatcherServlet = new DispatcherServlet(webApplicationContext);

        ServletRegistration.Dynamic registration =
                servletContext.addServlet("front-controller", dispatcherServlet);

        registration.setLoadOnStartup(1);
        registration.addMapping("/ui/*");
    }
}
````

So by now we've reproduced all the configuration we did with the `web.xml` file.

On application start the following output is shown in the console:

````wrapped-shell
.  .  .
2023-03-22 19:18:23.786:INFO:oejshC.web_app_spring_adv1:main: Initializing Spring DispatcherServlet 'front-controller'
Mar 22, 2023 7:18:23 PM org.springframework.web.servlet.FrameworkServlet initServletBean
INFO: Initializing Servlet 'front-controller'
Mar 22, 2023 7:18:24 PM org.springframework.web.servlet.FrameworkServlet initServletBean
INFO: Completed initialization in 295 ms
.  .  .
````

For now we still use an XML dispatcher servlet configuration file, but we we are going to get rid
of it soon.

Now need to add a simple controller ([`HelloController`](
<!--path code-->web-app-spring-adv1/src/main/java/springmvcstudy2/controllers/HelloController.java))
to check it works. After that the URL <http://localhost:8080/web-app-spring-adv1/ui/hello>
returns a page with content "Hi from the HelloController" (as it did in the previous part).

> Got commit: `ba89f0258f2042feae87b3b39422a9d40f664e91` dispatcher servlet and controller adjusted

----------------------------------------------------------------------------------------------------
# Get rid of Spring config XML file

[[2.4][], [36:06](https://youtu.be/Hk7fRv-GHpM?t=2166)]











