<!--VARIABLES {"title": "Form validation", "SORT_ORDER": "050", "code": "form_validation"}-->

[TOC]

[2.8]: <!--page refs-->#ref_2_8
[13]: <!--page refs-->#ref_13
[14]: <!--page refs-->#ref_14

----------------------------------------------------------------------------------------------------
Mar 27, 2023

<!--index ["validation, forms"]-->
# Form validation

[[2.8][]]

<a name="front_end_validation"></a>
## Why server-side validation

Why we need a server side validation rather than client side one? If we add a simple validation 
in JavaScript like this (see the [`home-page.jsp`](
    <!--path code-->web-app-spring-adv2/src/main/webapp/view/home-page.jsp) file):

````code
<script type="text/javascript">
function validateUserName() {
    if (document.getElementById("name1").value.length > 1) {
        return true
    } else {
        alert("The user name must be at least 2 character long!")
        return false
    }
}
</script>
.  .  .
<form action="calculate-page-dto" method="GET" onsubmit="return validateUserName()">
.  .  .
````

This validation rule will work but a user may easily break it using, e.g., a debugger tool in their
browser.

So we need to perform validation on the server where users cannot manipulate the code.

> Git commit: `ecc1819727ac509d8be35d521787c5e0b13b7953` client-side validation


## Introducing bean validation API

[[2.8][], [30:51](https://youtu.be/ot-TI5T7-5M?t=1851)]

Bean validation API 2.0 (JSR-380) is used. The previous versions are JSR-303 and JSR-349.
For more details about JCP see [here](<!--page common_notes-->#jcp). Also see [[13][]].

The JSR-380 standard is supported by Spring starting from version 5.2.

We are going to use **Hibernate validator**, version 6.0+. See [[14][]] for the implementations
discovered so far.


## Implementing bean validation

[[2.8][], [36:52](https://youtu.be/ot-TI5T7-5M?t=2212)]


For this demonstration we create separate artifacts:

- a new controller [`ValidatedController`](
    <!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/controllers/ValidatedController.java)
- a new DTO [`UserInfoValidatedDto`](
    <!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/model/UserInfoValidatedDto.java)
    (probably with not a good name)
- a new home page [`home-page-validated.jsp`](
    <!--path code-->web-app-spring-adv2/src/main/webapp/view/home-page-validated.jsp)

Need to add the following dependencies to the [POM](<!--path code-->web-app-spring-adv2/pom.xml):

````xml
        .  .  .
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>2.0.1.Final</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>8.0.0.Final</version>
        </dependency>
        .  .  .
````

The first one is just a set of interfaces. The second one is a concrete implementation (Hibernate).
Without the later dependency validation will not work.

!!! note
    <!--index ["@EnableWebMvc"]-->
    `@EnableWebMvc` annotation must be activated on the configuration to activate validation, 
    see the [`MyApplicationConfig`](
    <!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/config/MyApplicationConfig.java)
    class.

After validation is activated the following lines are output to the log when the server starts:

````shell
Mar 27, 2023 12:24:29 AM org.hibernate.validator.internal.util.Version <clinit>
INFO: HV000001: Hibernate Validator 6.1.6.Final
````

<!--index ["@NotBlank", "@Length"]-->
Validation rules are defined in the DTO:

````code
    .  .  .
    @NotBlank(message = " * can't be blank")
    @Length(min = 3, message = " * must have at least 3 characters")
    private String name1;
    .  .  .
````

The controller has the following controller methods:

````code
    .  .  .
    @RequestMapping("/validate")
    public String showHomePageSpring(@ModelAttribute("dto") UserInfoValidatedDto dto) {
        return "home-page-validated";
    }

    @RequestMapping("/validate-submit")
    public String showCalculatePageSpring(@Valid @ModelAttribute("dto") UserInfoValidatedDto dto,
                                          BindingResult result) {
        if (result.hasErrors()) {
            result.getAllErrors().forEach(System.out::println);
            return "home-page-validated";
        }
        return "result-page-spring";
    }
    .  .  .
````

<!--index ["@Valid", "BindingResult"]-->
The `@Valid` annotation states that the DTO must be valid according to the rules defined in it.
The `BindingResult` object provides access to the validation errors. Were in case of errors we 
return the same form page preventing the next page to be shown. The debug print outputs
information like this:

````wrapped-shell-error
Field error in object 'dto' on field 'name1': rejected value []; codes [Length.dto.name1,Length.name1,Length.java.lang.String,Length]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [dto.name1,name1]; arguments []; default message [name1],2147483647,3]; default message [ * must have at least 3 characters]
Field error in object 'dto' on field 'name1': rejected value []; codes [NotBlank.dto.name1,NotBlank.name1,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [dto.name1,name1]; arguments []; default message [name1]]; default message [ * can't be blank]
````

The JSP form looks like this:

````xml
.  .  .
<form:form action="validate-submit" method="GET" modelAttribute="dto">
<p><label for="name1">Name 1: </label><form:input id="name1" path="name1"/>
<form:errors path="name1"/></p>
<p><label for="name2">Name 2: </label><form:input id="name2" path="name2"/></p>
<input type="submit" value="calculate"/>
</form:form>
.  .  .
````

The `<form:errors path="name1"/>` element outputs the list of errors (if any) for the specified 
field.

> Git commit: `764155fd65a55162d5e23e6501eb4cd1bdbc11ed` server-side form validation implemented

The URL is <http://localhost:8080/web-app-spring-adv2/ui/validate>:

![](<!--path pict-->validated_form.png)

This snapshot was taken after the following styling is done.

----------------------------------------------------------------------------------------------------
# Making the form pretty

[[2.8][], [1:00:09](https://youtu.be/ot-TI5T7-5M?t=3609)]

The following commit makes the form look a little bit better.

> Git commit: `bab5cc787395af429e3bad90239a3b6f2ee4264b` form styling performed

----------------------------------------------------------------------------------------------------
# Combine front-end and back-end validations

[[2.8][], [1:08:22](https://youtu.be/ot-TI5T7-5M?t=4102)]

The discussed approach is useful for avoiding expensive and time consuming interactions and
calculations. Still this guarantees that the validation will be done even if the used breaks
the validation rules in a browser. It's not going to be reproduced, see 
[here](<!--page form_validation-->#front_end_validation) to have the main idea of the solution.

----------------------------------------------------------------------------------------------------
# Final steps

[[2.8][], [1:12:01](https://youtu.be/ot-TI5T7-5M?t=4321)]

Another checkbox "I am not a robot" added and the other input field is validated.

> Git commit: `b5a88ff0cdb251e3f4480bd6fabba3c8cc7f440f` final steps






