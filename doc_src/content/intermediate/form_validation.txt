<!--VARIABLES {"title": "Form validation", "SORT_ORDER": "050", "code": "form_validation"}-->

[TOC]

[2.8]: <!--page refs-->#ref_2_8
[2.10]: <!--page refs-->#ref_2_10
[2.11]: <!--page refs-->#ref_2_11
[13]: <!--page refs-->#ref_13
[14]: <!--page refs-->#ref_14

----------------------------------------------------------------------------------------------------
Mar 27, 2023

<!--index ["validation, forms"]-->
# Form validation

[[2.8][]]

<a name="front_end_validation"></a>
## Why server-side validation

Why we need a server side validation rather than client side one? If we add a simple validation 
in JavaScript like this (see the [`home-page.jsp`](
<!--path code-->web-app-spring-adv2/src/main/webapp/view/home-page.jsp) file):

````code
<script type="text/javascript">
function validateUserName() {
    if (document.getElementById("name1").value.length > 1) {
        return true
    } else {
        alert("The user name must be at least 2 character long!")
        return false
    }
}
</script>
.  .  .
<form action="calculate-page-dto" method="GET" onsubmit="return validateUserName()">
.  .  .
````

This validation rule will work but a user may easily break it using, e.g., a debugger tool in their
browser.

So we need to perform validation on the server where users cannot manipulate the code.

> Git commit: [`ecc1819727ac509d8be35d521787c5e0b13b7953`](
> <!--path patches-->ecc1819727ac509d8be35d521787c5e0b13b7953.html)
> client-side validation


<a name="bean_validation_api"></a>
## Introducing bean validation API

[[2.8][], [30:51](https://youtu.be/ot-TI5T7-5M?t=1851)]

Bean validation API 2.0 (JSR-380) is used. The previous versions are JSR-303 and JSR-349.
For more details about JCP see [here](<!--page common_notes-->#jcp). Also see [[13][]].

The JSR-380 standard is supported by Spring starting from version 5.2.

We are going to use **Hibernate validator**, version 6.0+. See [[14][]] for the implementations
discovered so far.


## Implementing bean validation

[[2.8][], [36:52](https://youtu.be/ot-TI5T7-5M?t=2212)]


For this demonstration we create separate artifacts:

- a new controller [`ValidatedController`](
    <!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/controllers/ValidatedController.java)
- a new DTO [`UserInfoValidatedDto`](
    <!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/model/UserInfoValidatedDto.java)
    (probably with not a good name)
- a new home page [`home-page-validated.jsp`](
    <!--path code-->web-app-spring-adv2/src/main/webapp/view/home-page-validated.jsp)

Need to add the following dependencies to the [POM](<!--path code-->web-app-spring-adv2/pom.xml):

````xml
        .  .  .
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>2.0.1.Final</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>8.0.0.Final</version>
        </dependency>
        .  .  .
````

The first one is just a set of interfaces. The second one is a concrete implementation (Hibernate).
Without the later dependency validation will not work.

!!! note
    <!--index ["@EnableWebMvc"]-->
    `@EnableWebMvc` annotation must be activated on the configuration to activate validation, 
    see the [`MyApplicationConfig`](
    <!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/config/MyApplicationConfig.java)
    class.

After validation is activated the following lines are output to the log when the server starts:

````shell
Mar 27, 2023 12:24:29 AM org.hibernate.validator.internal.util.Version <clinit>
INFO: HV000001: Hibernate Validator 6.1.6.Final
````

<!--index ["@NotBlank", "@Length"]-->
Validation rules are defined in the DTO:

````code
    .  .  .
    @NotBlank(message = " * can't be blank")
    @Length(min = 3, message = " * must have at least 3 characters")
    private String name1;
    .  .  .
````

!!! note
    See [[13][]] for more validation rules like `@Email`, `@Past`, `@Future` etc.

The controller has the following controller methods:

````code
    .  .  .
    @RequestMapping("/validate")
    public String showHomePageSpring(@ModelAttribute("dto") UserInfoValidatedDto dto) {
        return "home-page-validated";
    }

    @RequestMapping("/validate-submit")
    public String showCalculatePageSpring(@Valid @ModelAttribute("dto") UserInfoValidatedDto dto,
                                          BindingResult result) {
        if (result.hasErrors()) {
            result.getAllErrors().forEach(System.out::println);
            return "home-page-validated";
        }
        return "result-page-spring";
    }
    .  .  .
````

<!--index ["@Valid", "BindingResult"]-->
The `@Valid` annotation states that the DTO must be valid according to the rules defined in it.
The `BindingResult` object provides access to the validation errors. Were in case of errors we 
return the same form page preventing the next page to be shown. The debug print outputs
information like this:

````wrapped-shell-error
Field error in object 'dto' on field 'name1': rejected value []; codes [Length.dto.name1,Length.name1,Length.java.lang.String,Length]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [dto.name1,name1]; arguments []; default message [name1],2147483647,3]; default message [ * must have at least 3 characters]
Field error in object 'dto' on field 'name1': rejected value []; codes [NotBlank.dto.name1,NotBlank.name1,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [dto.name1,name1]; arguments []; default message [name1]]; default message [ * can't be blank]
````

The JSP form looks like this:

````xml
.  .  .
<form:form action="validate-submit" method="GET" modelAttribute="dto">
<p><label for="name1">Name 1: </label><form:input id="name1" path="name1"/>
<form:errors path="name1"/></p>
<p><label for="name2">Name 2: </label><form:input id="name2" path="name2"/></p>
<input type="submit" value="calculate"/>
</form:form>
.  .  .
````

The `<form:errors path="name1"/>` element outputs the list of errors (if any) for the specified 
field.

> Git commit: [`764155fd65a55162d5e23e6501eb4cd1bdbc11ed`](
> <!--path patches-->764155fd65a55162d5e23e6501eb4cd1bdbc11ed.html)
> server-side form validation implemented

The URL is <http://localhost:8080/web-app-spring-adv2/ui/validate>:

![](<!--path pict-->validated_form.png)

This snapshot was taken after the following styling is done.

----------------------------------------------------------------------------------------------------
# Making the form pretty

[[2.8][], [1:00:09](https://youtu.be/ot-TI5T7-5M?t=3609)]

The following commit makes the form look a little bit better.

> Git commit: [`bab5cc787395af429e3bad90239a3b6f2ee4264b`](
> <!--path patches-->bab5cc787395af429e3bad90239a3b6f2ee4264b.html)
> form styling performed

----------------------------------------------------------------------------------------------------
# Combine front-end and back-end validations

[[2.8][], [1:08:22](https://youtu.be/ot-TI5T7-5M?t=4102)]

The discussed approach is useful for avoiding expensive and time consuming interactions and
calculations. Still this guarantees that the validation will be done even if the used breaks
the validation rules in a browser. It's not going to be reproduced, see 
[here](<!--page form_validation-->#front_end_validation) to have the main idea of the solution.

----------------------------------------------------------------------------------------------------
# Final steps

[[2.8][], [1:12:01](https://youtu.be/ot-TI5T7-5M?t=4321)]

Another checkbox "I am not a robot" added and the other input field is validated.

> Git commit: [`b5a88ff0cdb251e3f4480bd6fabba3c8cc7f440f`](
> <!--path patches-->b5a88ff0cdb251e3f4480bd6fabba3c8cc7f440f.html)
> final steps

----------------------------------------------------------------------------------------------------
# Validation messages

If when using the `@Size` annotation we don't specify the `message` argument then the default
message, like "size must be between 3 and 10", will be used. Some hints about the way it works
may be found in the following files:

- `validation-api-2.0.1.Final.jar!/javax/validation/constraints/Size.class:13` see the 
 `javax.validation.constraints.Size#message` method definition;
- `hibernate-validator-6.1.6.Final.jar!/org/hibernate/validator/ValidationMessages.properties:22`
    where the following property is defined:
    
    ````
    javax.validation.constraints.Size.message = size must be between {min} and {max}
    ````
    
As it's implemented this way, we can use parameters like `{min}` and `{max}` in our messages like this:

````code
    @Size(min = 3, max = 10, message = " * must have from {min} to {max} characters")
````

> Git commit: [`2e827339401f29efb950b8ae912f46124d4dad9a`](
> <!--path patches-->2e827339401f29efb950b8ae912f46124d4dad9a.html)
> validation messages customization investigated
    
----------------------------------------------------------------------------------------------------
Mar 27, 2023

# Custom validators

[[2.10][]]

!!! note
    This part of development is being done after some additional fields ("Age", "Email", "Phone")
    are added to the registration form. See [here](<!--page formatters-->).

So far we used the Hibernate implementation of validators (also see [here](
<!--page form_validation-->#bean_validation_api)). Now we are going to implement our custom
validator constraint.


## Implementation

[[2.10][], [15:06](https://youtu.be/aNpJGvFR5uI?t=906)]

First implement a simpler `@AgeValidator`. Existing validators code is investigated in this part
of the video. The coding itself is going to be started after the following time stamp.

[[2.10][], [55:52](https://youtu.be/aNpJGvFR5uI?t=3352)]

Creating the [`@Age`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/validators/Age.java)
annotation:

````code
@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.FIELD)
@Constraint(validatedBy = AgeValidator.class)
public @interface Age {

    String message() default "Age should be between {lower}-{upper}";
    int lower() default 18;
    int upper() default 60;

    java.lang.Class<?>[] groups() default {};
    java.lang.Class<? extends javax.validation.Payload>[] payload() default {};
}
````

The `groups()` and `payload()` fields are copied from the existing
`@javax.validation.constraints.NotBlank` annotation.

Creating the [`AgeValidator`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/validators/AgeValidator.java)
validator class:

````code
public class AgeValidator implements ConstraintValidator<Age, Integer> {

    private int lower;
    private int upper;

    @Override
    public boolean isValid(Integer age, ConstraintValidatorContext constraintValidatorContext) {
        return age != null && age >= this.lower && age <= this.upper;
    }

    @Override
    public void initialize(Age age) {
        this.lower = age.lower();
        this.upper = age.upper();
    }
}
````

In the [`RegistrationDto`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/model/RegistrationDto.java)
DTO class adding the newly created annotation to the field `age`:

````code
    .  .  .
    @Age(lower = 20, upper = 70, message = "should be between {lower} and {upper}")
    private Integer age;
    .  .  .
````

As the `ConstraintValidator` interface cannot accept primitive type parameters, changing the `age`
field type from `int` to `Integer`.

Editing the [`RegistrationController`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/controllers/RegistrationController.java)
corresponding controller method:

````code
    @RequestMapping("/registration-success")
    public String processUserRegistration(@Valid @ModelAttribute("userReg") RegistrationDto userReg,
                                          BindingResult result) {
        if (result.hasErrors()) {
            return "registration-page";
        }
        return "registration-success";
    }
}
````

Updating the [`registration-page.jsp`](
<!--path code-->web-app-spring-adv2/src/main/webapp/view/registration-page.jsp)
view to make it show the error messages:

````xml
</p><label for="age">Age: </label><form:input id="age" path="age"/>
<form:errors path="age" cssClass="error"/></p>
````

By the URL <http://localhost:8080/web-app-spring-adv2/ui/register> we can confirm that the 
"Age" field is validated.

> Git commit: [`b0c9041b5224fdc73eb96b051423520f80bc0daf`](
> <!--path patches-->b0c9041b5224fdc73eb96b051423520f80bc0daf.html)
> custom validator is applied to the "Age" field


<!--index ["message externalization"]-->
## Externalizing messages

[[2.10][], [1:39:47](https://youtu.be/aNpJGvFR5uI?t=5987)]

Here the error message is going to be defined in a `*.properties` file.

In the [`@Age`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/validators/Age.java)
annotation we redefine the message like this:

````code
    .  .  .
    String message() default "{invalidAgeMessage}";
    .  .  .
````

Then creating the [`messages.properties`](
<!--path code-->web-app-spring-adv2/src/main/resources/messages.properties) file inside the 
`src/main/resources` directory:

````
invalidAgeMessage=age should be between {lower} and {upper}
````

!!! note
    See [here](<!--page form_validation-->#placeholders_in_properties_files) for more details
    about *placeholders* usage.

In the Spring MVC configuration class [`MyApplicationConfig`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/config/MyApplicationConfig.java)
adding the following code:

````code
    .  .  .
    public MessageSource messageSource() {
        ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();
        messageSource.setBasenames("messages");
        return messageSource;
    }

    public LocalValidatorFactoryBean validator() {
        LocalValidatorFactoryBean localValidatorFactoryBean = new LocalValidatorFactoryBean();
        localValidatorFactoryBean.setValidationMessageSource(messageSource());
        return localValidatorFactoryBean;
    }
    .  .  .
    @Override
    public Validator getValidator() {
        return validator();
    }
    .  .  .
````

The method `getValidator()` overwrites the corresponding method of the `WebMvcConfigurer` interface.
There's not much explanation about this code, just can confirm it works.

!!! important
    The `@Bean` annotation must be added to the `messageSource()` method. Its absence will cause
    problems in the future.

In the [`RegistrationDto`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/model/RegistrationDto.java)
DTO class removing the explicit message to check that the default message is used:

````code
    .  .  .
    @Age(lower = 20, upper = 70)
    private Integer age;
    .  .  .
````

> Git commit: [`15f922dd56577e9eb093a97741e7ea85c3f02d33`](
> <!--path patches-->15f922dd56577e9eb093a97741e7ea85c3f02d33.html)
> error message externalized

----------------------------------------------------------------------------------------------------
Mar 28, 2023

# Spring framework validation API

[[2.11][], [2:03:53](https://youtu.be/ms4ywje7EYI?t=7433)]

!!! note
    This part is described not in the order it has in the original course.

The requirements are going to be fulfilled about the "User name" field:

- it should not be empty;
- it should contain an underscore (_).

Creating a validator class [`UserNameValidator`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/validators/UserNameValidator.java):

````code
public class UserNameValidator implements Validator {

    @Override
    public boolean supports(Class<?> clazz) {
        return RegistrationDto.class.equals(clazz);
    }

    @Override
    public void validate(Object target, Errors errors) {
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "userName",
                "userName.empty", "User name should not be empty");
        String userName = ((RegistrationDto) target).getUserName();
        if (!userName.contains("_")) {
            errors.rejectValue("userName", "userName.invalidString",
                    "User name should contain an underscore (_)");
        }
    }
}
````

The implemented interface is `org.springframework.validation.Validator`.
The `supports()` method decides whether the DTO object must be validated by this validator.

The validator is added in the [`RegistrationController`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/controllers/RegistrationController.java):

````code
    .  .  .
    @InitBinder
    public void initBinder(WebDataBinder dataBinder) {
        .  .  .
        dataBinder.addValidators(new UserNameValidator());
    }
    .  .  .
````

The URL is <http://localhost:8080/web-app-spring-adv2/ui/register>.

> Git commit: [`781dcbe7466b52bbd9d9dabe4889b32929d9ddc5`](
> <!--path patches-->781dcbe7466b52bbd9d9dabe4889b32929d9ddc5.html)
> Spring framawork validator used


## Using property file

[[2.11][], [2:28:28](https://youtu.be/ms4ywje7EYI?t=8908)]

Here we add another validator that checks that the email ends with some certain text.

The coding part is pretty much the same as it was before, just several things must be pointed out.

The new [`EmailValidator`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/validators/EmailValidator.java):

````code
    .  .  .
    @Override
    public void validate(Object target, Errors errors) {
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "communicationDto.email", "email.empty");
        String email = ((RegistrationDto) target).getCommunicationDto().getEmail();
        if (!email.endsWith("@certain-domain.com")) {
            errors.rejectValue("communicationDto.email", "email.invalidDomain");
        }
    }
    .  .  .
````

The difference is that the error messages are omitted, they will be taken from the properties file
[`messages.properties`](
<!--path code-->web-app-spring-adv2/src/main/resources/messages.properties).

The URL is the same --- <http://localhost:8080/web-app-spring-adv2/ui/register>.

> Git commit: [`bc802fbeb9cbf98f3ecb75a7ac02931e5bf118a8`](
> <!--path patches-->bc802fbeb9cbf98f3ecb75a7ac02931e5bf118a8.html)
> properties file used for error messages

----------------------------------------------------------------------------------------------------
# Calling validators manually

[[2.11][], [2:38:20](https://youtu.be/ms4ywje7EYI?t=9500)]

Comment out the line

````code
//        dataBinder.addValidators(new EmailValidator());
````

in the `@InitBinder` annotated method in the [`RegistrationController`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/controllers/RegistrationController.java).

Add the following call to the corresponding controller method:

````code
        EmailValidator emailValidator = new EmailValidator();
        emailValidator.validate(userReg, result);
````

> Git commit: [`8174ad083bc415c0f7870bdc91d0019e299a564f`](
> <!--path patches-->8174ad083bc415c0f7870bdc91d0019e299a564f.html)
> email validator used manually

To avoid creating the validator object on every request make the [`EmailValidator`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/validators/EmailValidator.java)
a component (with the `@Component` annotation) and add the autowired field to the controller class:

````code
    @Autowired
    private EmailValidator emailValidator;
````

Also need to update the component scan base package list in the configuration class 
[`MyApplicationConfig`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/config/MyApplicationConfig.java):

````code
@ComponentScan(basePackages = {"springmvcstudy2.controllers", "springmvcstudy2.validators"})
````

The both above variations work as before. The URL is 
<http://localhost:8080/web-app-spring-adv2/ui/register>.

> Git commit: [`59d483e0ce7dbc6efce6e5c50ac59b2f9b5909e9`](
> <!--path patches-->59d483e0ce7dbc6efce6e5c50ac59b2f9b5909e9.html)
> email validator used manually (with autowiring)

----------------------------------------------------------------------------------------------------
<!--index ["placeholders, in properties files"]--><a name="placeholders_in_properties_files"></a>
# Using placeholders in properties files

[[2.11][], [2:47:55](https://youtu.be/ms4ywje7EYI?t=10075)]

*Placeholders* may be defined in property files and used inside messages in the validation
annotations.

In the [`messages.properties`](
<!--path code-->web-app-spring-adv2/src/main/resources/messages.properties) file making the 
following changes:

````
invalidAgeMessage={0} should be between {1} and {2}
.  .  .
should_not_be_blank=Field ''{0}'' SHOULD NOT BE BLANK
age=USER AGE
````

In the [`RegistrationDto`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/model/RegistrationDto.java)
using this property via a placeholder:

````code
    @NotEmpty(message = "{should_not_be_blank}")
    private String name;
````

So the result is:

- for the "Name" field: "<span style="color:red;">Field 'name' SHOULD NOT BE BLANK</span>"
- for the "Age" field: "<span style="color:red;">USER AGE should be between 20 and 70</span>"

!!! important
    The numbered message argument placeholders are sorted by their names, e.g. an argument named
    "max" precedes an argument named "min".

The URL is <http://localhost:8080/web-app-spring-adv2/ui/register>.

> Git commit: [`606c127f52ba035e593edec8ec60f20552916595`](
> <!--path patches-->606c127f52ba035e593edec8ec60f20552916595.html)
> placeholders used

----------------------------------------------------------------------------------------------------
<!--index ["type mismatch problems"]-->
# Dealing with type mismatch problems

[[2.11][], [3:01:15](https://youtu.be/ms4ywje7EYI?t=10875)]

If we input a random string into the "Age" field on the registration form we well see the error
message like this: <span style="color:red;">Failed to convert property value of type
java.lang.String to required type java.lang.Integer for property age; nested exception is
java.lang.NumberFormatException: For input string: "rtrtrt"</span>. This is definitely not good
for the users.

The server log will show the following output:

````wrapped-shell-error
VALIDATION: registration form has errors:
Field error in object 'userReg' on field 'age': rejected value [rrtr]; codes [typeMismatch.userReg.age,typeMismatch.age,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [userReg.age,age]; arguments []; default message [age]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'age'; nested exception is java.lang.NumberFormatException: For input string: "rrtr"]
````

As we can see some `codes` are listed in the above message so we are adding the following
property into our properties file [`messages.properties`](
<!--path code-->web-app-spring-adv2/src/main/resources/messages.properties):

````
typeMismatch.java.lang.Integer=Field {0} should be a valid number
````

As the result, the message now is: 
<span style="color:red;">Field USER AGE should be a valid number</span>, that is much more 
polite to the users.

The URL is <http://localhost:8080/web-app-spring-adv2/ui/register>.

> Git commit: [`7d5cffdb51061f794a6a69b550da9e806ba4ae00`](
> <!--path patches-->7d5cffdb51061f794a6a69b550da9e806ba4ae00.html)
> type mismatch problem handled









