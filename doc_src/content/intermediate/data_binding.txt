<!--VARIABLES {"title": "Data binding", "SORT_ORDER": "030", 
"code": "data_binding"}-->

[TOC]

[2.6]: <!--page refs-->#ref_2_6
[11]: <!--page refs-->#ref_11

----------------------------------------------------------------------------------------------------
Mar 23, 2023

# About this section

[[2.6][], [2:13](https://youtu.be/3x4RoGGpETM?t=133)]

In this section data communication will be demonstrated using:

- HTML forms;
- and Spring MVC forms.

Also different types of models will be discussed.

----------------------------------------------------------------------------------------------------
# Project setup

Project `web-app-spring-adv1` was copy-pasted to `web-app-spring-adv2` and cleaned up a little bit.
URL <http://localhost:8080/web-app-spring-adv2/view/hello-page.jsp> may be used for a check.

> Git commit: [`f000a2489fd9a080eaf02386c396b5481fa75eea`](
> <!--path patches-->f000a2489fd9a080eaf02386c396b5481fa75eea.html)
> project 'web-app-spring-adv2' initialized

----------------------------------------------------------------------------------------------------
<!--index ["model, data binding"]-->
# Form processing with a `Model`

A similar thing was done [here](<!--page model-->). In this section the following pages are
created and tied up with the controller methods:

- <http://localhost:8080/web-app-spring-adv2/ui/>

    ![](<!--path pict-->two_names_form.png)
    
- <http://localhost:8080/web-app-spring-adv2/ui/calculate-page?name1=bob&name2=alice>

    ![](<!--path pict-->two_names_result.png)
    
<!--index ["@RequestParam"]-->
In this example also the `@org.springframework.web.bind.annotation.RequestParam` annotation is
used. This annotation is applied to controller method parameters and maps these parameters to
the HTTP request parameters. Here the example in the file [`MyAppController`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/controllers/MyAppController.java):

````code
    .  .  .
    @RequestMapping("/calculate-page")
    public String showCalculatePage(@RequestParam("name1") String firstName,
                                    @RequestParam String name2,
                                    Model model) {
        model.addAttribute("firstName", firstName);
        model.addAttribute("secondName", name2);
        return "result-page";
    }
    .  .  .
````

> Git commit: [`d4c97497cf4bcc5e57b63dd3f2818016cedc950b`](
> <!--path patches-->d4c97497cf4bcc5e57b63dd3f2818016cedc950b.html)
> two names form created and processed

----------------------------------------------------------------------------------------------------
<!--index ["DTO, data binding"]-->
# Adding a DTO

[[2.6][], [48:19](https://youtu.be/3x4RoGGpETM?t=2899)]

In the [`MyAppController`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/controllers/MyAppController.java)
controller a new method is added:

````code
    .  .  .
    @RequestMapping("/calculate-page-dto")
    public String showCalculatePageDto(UserInfoDto dto, Model model) {
        model.addAttribute("firstName", dto.getName1());
        model.addAttribute("secondName", dto.getName2());
        return "result-page";
    }
    .  .  .
````

It uses the parameter `dto` of a newly created class [`UserInfoDto`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/model/UserInfoDto.java)
that is a simple POJO with fields, setters and getters. the content of this object is filled 
by the Spring MVC framework.

The new URL is <http://localhost:8080/web-app-spring-adv2/ui/calculate-page-dto?name1=alice&name2=bob>
and the result is the same.

> Git commit: [`535ac38da2941822bae538692fec190161d2bf62`](
> <!--path patches-->535ac38da2941822bae538692fec190161d2bf62.html)
> DTO used for form data binding

----------------------------------------------------------------------------------------------------
<!--index ["forms, Spring MVC"]-->
# Using Spring MVC form tag

[[2.6][], [1:15:29](https://youtu.be/3x4RoGGpETM?t=4529)], also probably [[11][]] may be useful
as an additional material.

Spring MVC form tag will help us for two-way data binding.

The following tags may be used:

- `form:form`
- `form:input`
- `form:radiobutton`
- `form:select`
- `form:password`
- `form:textarea`

Need to activate these tags by adding the following tag library declaration to the JSP file:

````xml
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
````

Two additional controller methods were added into the [`MyAppController`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/controllers/MyAppController.java)
controller:

````code
    .  .  .
    @RequestMapping("/spring")
    public String showHomePageSpring(Model model) {
        UserInfoDto dto = new UserInfoDto();
        model.addAttribute("userInfo", dto);
        return "home-page-spring";
    }

    @RequestMapping("/calculate-page-springs")
    public String showCalculatePageSpring(UserInfoDto dto, Model model) {
        model.addAttribute("dto", dto);
        return "result-page-spring";
    }
    .  .  .
````

Two views were added as well:

- [`home-page-spring.jsp`](
    <!--path code-->web-app-spring-adv2/src/main/webapp/view/home-page-spring.jsp), the fragment is:
    
    ````xml
    .  .  .
    <form:form action="calculate-page-springs" method="GET" modelAttribute="userInfo">
    <p><label for="name1">Name 1: </label><form:input id="name1" path="name1"/></p>
    <p><label for="name2">Name 2: </label><form:input id="name2" path="name2"/></p>
    <input type="submit" value="calculate"/>
    </form:form>
    .  .  .
    ````

- [`result-page-spring.jsp`](
    <!--path code-->web-app-spring-adv2/src/main/webapp/view/result-page-spring.jsp), the fragment is:
    
    ````xml
    .  .  .
    <p>Name 1 is: ${dto.name1}</p>
    <p>Name 2 is: ${dto.name2}</p>
    .  .  .
    ````

> Git commit: [`2b0e4b15df7aac1076902411e6cc99b7c98df631`](
> <!--path patches-->2b0e4b15df7aac1076902411e6cc99b7c98df631.html)
> Spring MVC form tags introduced

Actually with this approach it's not necessary to handle a model object. The controller methods 
may be significantly simplified like this:

````code
    .  .  .
    @RequestMapping("/spring")
    public String showHomePageSpring(@ModelAttribute("userInfo") UserInfoDto dto) {
        return "home-page-spring";
    }

    @RequestMapping("/calculate-page-springs")
    public String showCalculatePageSpring(@ModelAttribute("dto") UserInfoDto dto) {
        return "result-page-spring";
    }
    .  .  .
````

> Git commit: [`8995a8f64dd67ad319ce7650a4ee330eab28c4b8`](
> <!--path patches-->8995a8f64dd67ad319ce7650a4ee330eab28c4b8.html)
> controller methods simplified









