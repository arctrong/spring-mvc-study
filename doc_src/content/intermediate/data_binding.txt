<!--VARIABLES {"title": "Data binding", "SORT_ORDER": "030", "code": "data_binding"}-->

[TOC]

[2.6]: <!--page refs-->#ref_2_6
[2.16]: <!--page refs-->#ref_2_16
[2.17]: <!--page refs-->#ref_2_17
[11]: <!--page refs-->#ref_11
[17]: <!--page refs-->#ref_17
[18]: <!--page refs-->#ref_18

----------------------------------------------------------------------------------------------------
Mar 23, 2023

# About this section

[[2.6][], [2:13](https://youtu.be/3x4RoGGpETM?t=133)]

In this section data communication will be demonstrated using:

- HTML forms;
- and Spring MVC forms.

Also different types of models will be discussed.

----------------------------------------------------------------------------------------------------
# Project setup

Project `web-app-spring-adv1` was copy-pasted to `web-app-spring-adv2` and cleaned up a little bit.
URL <http://localhost:8080/web-app-spring-adv2/view/hello-page.jsp> may be used for a check.

> Git commit: [`795beda0443df37aa087cd6ac24d5cb9d093b8a2`](
> <!--path patches-->795beda0443df37aa087cd6ac24d5cb9d093b8a2.html)
> project 'web-app-spring-adv2' initialized

----------------------------------------------------------------------------------------------------
<!--index ["model, data binding"]-->
# Form processing with a `Model`

A similar thing was done [here](<!--page model-->). In this section the following pages are
created and tied up with the controller methods:

- <http://localhost:8080/web-app-spring-adv2/ui/>

    ![](<!--path pict-->two_names_form.png)
    
- <http://localhost:8080/web-app-spring-adv2/ui/calculate-page?name1=bob&name2=alice>

    ![](<!--path pict-->two_names_result.png)
    
<!--index ["@RequestParam"]-->
In this example also the `@org.springframework.web.bind.annotation.RequestParam` annotation is
used. This annotation is applied to controller method parameters and maps these parameters to
the HTTP request parameters. Here the example in the file [`MyAppController`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/controllers/MyAppController.java):

````code
    .  .  .
    @RequestMapping("/calculate-page")
    public String showCalculatePage(@RequestParam("name1") String firstName,
                                    @RequestParam String name2,
                                    Model model) {
        model.addAttribute("firstName", firstName);
        model.addAttribute("secondName", name2);
        return "result-page";
    }
    .  .  .
````

> Git commit: [`9e58c49500e1a1fe5e13fa1e4cd4b1caa8bce005`](
> <!--path patches-->9e58c49500e1a1fe5e13fa1e4cd4b1caa8bce005.html)
> two names form created and processed

----------------------------------------------------------------------------------------------------
<!--index ["DTO, data binding"]-->
# Adding a DTO

[[2.6][], [48:19](https://youtu.be/3x4RoGGpETM?t=2899)]

In the [`MyAppController`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/controllers/MyAppController.java)
controller a new method is added:

````code
    .  .  .
    @RequestMapping("/calculate-page-dto")
    public String showCalculatePageDto(UserInfoDto dto, Model model) {
        model.addAttribute("firstName", dto.getName1());
        model.addAttribute("secondName", dto.getName2());
        return "result-page";
    }
    .  .  .
````

It uses the parameter `dto` of a newly created class [`UserInfoDto`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/model/UserInfoDto.java)
that is a simple POJO with fields, setters and getters. the content of this object is filled 
by the Spring MVC framework.

The new URL is <http://localhost:8080/web-app-spring-adv2/ui/calculate-page-dto?name1=alice&name2=bob>
and the result is the same.

> Git commit: [`3a693e8f66a8770fc1d3c6c8782a8f39609d717a`](
> <!--path patches-->3a693e8f66a8770fc1d3c6c8782a8f39609d717a.html)
> DTO used for form data binding

----------------------------------------------------------------------------------------------------
<!--index ["forms, Spring MVC"]-->
# Using Spring MVC form tag

[[2.6][], [1:15:29](https://youtu.be/3x4RoGGpETM?t=4529)], also probably [[11][]] may be useful
as an additional material.

Spring MVC form tag will help us for two-way data binding.

The following tags may be used:

- `form:form`
- `form:input`
- `form:radiobutton`
- `form:select`
- `form:password`
- `form:textarea`

Need to activate these tags by adding the following tag library declaration to the JSP file:

````xml
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
````

Two additional controller methods were added into the [`MyAppController`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/controllers/MyAppController.java)
controller:

````code
    .  .  .
    @RequestMapping("/spring")
    public String showHomePageSpring(Model model) {
        UserInfoDto dto = new UserInfoDto();
        model.addAttribute("userInfo", dto);
        return "home-page-spring";
    }

    @RequestMapping("/calculate-page-springs")
    public String showCalculatePageSpring(UserInfoDto dto, Model model) {
        model.addAttribute("dto", dto);
        return "result-page-spring";
    }
    .  .  .
````

Two views were added as well:

- [`home-page-spring.jsp`](
    <!--path code-->web-app-spring-adv2/src/main/webapp/view/home-page-spring.jsp), the fragment is:
    
    ````xml
    .  .  .
    <form:form action="calculate-page-springs" method="GET" modelAttribute="userInfo">
    <p><label for="name1">Name 1: </label><form:input id="name1" path="name1"/></p>
    <p><label for="name2">Name 2: </label><form:input id="name2" path="name2"/></p>
    <input type="submit" value="calculate"/>
    </form:form>
    .  .  .
    ````

- [`result-page-spring.jsp`](
    <!--path code-->web-app-spring-adv2/src/main/webapp/view/result-page-spring.jsp), the fragment is:
    
    ````xml
    .  .  .
    <p>Name 1 is: ${dto.name1}</p>
    <p>Name 2 is: ${dto.name2}</p>
    .  .  .
    ````

> Git commit: [`3804e740d5c5a6acf518d5a8d6aa5bce42e4f66e`](
> <!--path patches-->3804e740d5c5a6acf518d5a8d6aa5bce42e4f66e.html)
> Spring MVC form tags introduced

<!--index ["@ModelAttribute"]-->
Actually with this approach it's not necessary to handle a model object. The controller methods 
may be significantly simplified like this:

````code
    .  .  .
    @RequestMapping("/spring")
    public String showHomePageSpring(@ModelAttribute("userInfo") UserInfoDto dto) {
        return "home-page-spring";
    }

    @RequestMapping("/calculate-page-springs")
    public String showCalculatePageSpring(@ModelAttribute("dto") UserInfoDto dto) {
        return "result-page-spring";
    }
    .  .  .
````

!!! note
    There's an additional explanations on the `@ModelAttribute` annotation 
    [here](<!--page data_binding-->#modelattribute_method_level).

    Looks like the `@ModelAttribute` annotation **requires** the argument. There were cases
    when it didn't work without arguments even if the parameter name matched the attribute name
    like in the second example where the both names are `dto`.

> Git commit: [`e202af80462441a660c87a1f2e387fd27faf9c2e`](
> <!--path patches-->e202af80462441a660c87a1f2e387fd27faf9c2e.html)
> controller methods simplified

----------------------------------------------------------------------------------------------------
Apr 5, 2023

<!--index ["@ModelAttribute, method level"]--><a name="modelattribute_method_level"></a>
# `@ModelAttribute` at the method level

[[2.16][]], also see [[17][]]

In the Youtube course this material is given much later than the other material in this section.

The existing project 
[`web-app-spring-sessions`](<!--page sessions_and_cookies-->#conversational_scope) 
is going to be used for the work through.

Some initial objects (a controller, a view and a model) are created:

> Git commit: [`7a1014dca7bc7d3e207b9e06cb1312c871de51b8`](
> <!--path patches-->7a1014dca7bc7d3e207b9e06cb1312c871de51b8.html)
> initial setup for @ModelAttribute investigation
> 
> Git commit: [`2ac5aecf4683500b8d12dc5f34453648537496a8`](
> <!--path patches-->2ac5aecf4683500b8d12dc5f34453648537496a8.html)
> simple model usage demonstrated

[[2.16][], [12:23](https://youtu.be/_Nafv53TKYY?t=743)]

The new [`MyWebsiteController`](
<!--path code-->web-app-spring-sessions/src/main/java/springmvcstudy/controllers/MyWebsiteController.java)
class version is:

````code
@Controller
public class MyWebsiteController {

    @ModelAttribute
    private WebsiteInfoDto getWebsiteInfo() {
        System.out.println("Inside getWebsiteInfo() method");
        WebsiteInfoDto websiteInfo = new WebsiteInfoDto();
        websiteInfo.setWebsiteName("need-for-spring.edu");
        websiteInfo.setWebsiteCategory("education");
        return websiteInfo;
    }

    @RequestMapping("/siteInfo")
    public String showWebsiteInfo(Model model) {
        System.out.println("Inside showWebsiteInfo() method");
        WebsiteInfoDto websiteInfo = (WebsiteInfoDto) model.getAttribute("websiteInfoDto");
        System.out.println("websiteInfo=" + reflectionToString(websiteInfo, JSON_STYLE));
        return "info";
    }

    @RequestMapping("/companyInfo")
    public String showCompanyInfo() {
        System.out.println("Inside showCompanyInfo() method");
        return "info";
    }
}
````

The `getWebsiteInfo()` method annotated with the `@ModelAttribute` is called before calling every
controller handler method:

````shell
Inside getWebsiteInfo() method
Inside WebsiteInfoDto constructor
Inside showWebsiteInfo() method
websiteInfo={"websiteCategory":"education","websiteName":"need-for-spring.edu"}
````

The web page looks like this:

![](<!--path pict-->modelattribute.png)

The both pages shows the same dynamic field values.

> Git commit: [`2d2229ba9c65e81593b86eb716585bc48f6e8386`](
> <!--path patches-->2d2229ba9c65e81593b86eb716585bc48f6e8386.html)
> @ModelAttribute at method level implemented

[[2.16][], [23:48](https://youtu.be/_Nafv53TKYY?t=1428)]

If in the `showCompanyInfo()` handler method we declare the model attribute like this:

````code
    @RequestMapping("/companyInfo")
    public String showCompanyInfo(@ModelAttribute("websiteInfo") WebsiteInfoDto websiteInfo) {
        System.out.println("Inside showCompanyInfo() method");
        System.out.println("websiteInfo=" + reflectionToString(websiteInfo, JSON_STYLE));
        return "info";
    }
````

we will find out that a new model is not created if it's already created by the `@ModelAttribute`
annotated method.

> Git commit: [`363efc7f53dbb4306b6e44a44cf9f695eda394db`](
> <!--path patches-->363efc7f53dbb4306b6e44a44cf9f695eda394db.html)
> @ModelAttribute annotation used


<!--index ["@ControllerAdvice"]--><a name="controlleradvice_annotation"></a>
## `@ControllerAdvice` annotation

This annotation is used in the following subsection and in the other parts of this course nones.

The official documentation may be found in [[18][], [1.3.7. Controller Advice](
https://docs.spring.io/spring-framework/docs/5.3.9/reference/html/web.html#mvc-ann-controller-advice)]:

> Typically `@ExceptionHandler`, `@InitBinder`, and `@ModelAttribute` methods apply within the
> `@Controller` class (or class hierarchy) in which they are declared. If you want such methods
> to apply more globally (across controllers), you can declare them in a class annotated with
> `@ControllerAdvice` or `@RestControllerAdvice`.

It's also explained in some more details at
[[2.17][], [1:17:50](https://youtu.be/Suxp_fSMse4?t=4670)].


## Make model attributes global

[[2.16][], [41:21](https://youtu.be/_Nafv53TKYY?t=2481)]

If we add another controller [`MyTestController`](
<!--path code-->web-app-spring-sessions/src/main/java/springmvcstudy/controllers/MyTestController.java):

````code
@Controller
public class MyTestController {

    @RequestMapping("/test")
    public String showTestInfo(@ModelAttribute("websiteInfo") WebsiteInfoDto websiteInfo) {
        System.out.println("Inside showTestInfo() method");
        System.out.println("websiteInfo=" + reflectionToString(websiteInfo, JSON_STYLE));
        return "info";
    }
}
````

then of cause the `websiteInfo` model attribute will be created anew and the view fields will be 
empty.

The `@org.springframework.web.bind.annotation.ControllerAdvice` annotation on the first controller
[`MyWebsiteController`](
<!--path code-->web-app-spring-sessions/src/main/java/springmvcstudy/controllers/MyWebsiteController.java)
will make this controller `getWebsiteInfo()` method execute on the other controllers:

````code
@Controller
@ControllerAdvice(assignableTypes = MyTestController.class)
public class MyWebsiteController {
.  .  .
````

The `assignableTypes` parameter allows to restrict the controller classes that are affected by this
annotation. If no arguments are specified then **all** controllers will be affected. There's also
the self explanatory `basePackages` parameter.

> Git commit: [`36e2031fb6a999c3ae3e44b987842ac446e1e4e9`](
> <!--path patches-->36e2031fb6a999c3ae3e44b987842ac446e1e4e9.html)
> @ControllerAdvice annotation used


<a name="combination_modelattribute_and_sessionattributes"></a>
## Combination with the `@SessionAttributes` annotation

[[2.16][], [51:46](https://youtu.be/_Nafv53TKYY?t=3106)] 


When we use the 
[`@SessionAttributes` annotation](<!--page sessions_and_cookies-->#using_sessionattributes_annotation)
on the controller the `@ModelAttribute` annotated method is invoked only if the 
*conversational scope* does not contain the specified attributes:

````code
@Controller
@ControllerAdvice(assignableTypes = MyTestController.class)
@SessionAttributes("websiteInfo")
public class MyWebsiteController {
.  .  .
````

As we add the `@SessionAttributes` annotation the model attribute ones created is persisted in the
session and is not created anymore. See the bellow commit for more details.

> Git commit: [`492be58a46a2f62eaa5e255dcf99abbe69e6089b`](
> <!--path patches-->492be58a46a2f62eaa5e255dcf99abbe69e6089b.html)
> @ModelAttribute conbined with @SessionAttributes 












