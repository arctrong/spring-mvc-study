<!--VARIABLES {"title": "Spring MVC Formatter", "SORT_ORDER": "060", "code": "formatters"}-->

[TOC]

[2.9]: <!--page refs-->#ref_2_9
[2.11]: <!--page refs-->#ref_2_11
[15]: <!--page refs-->#ref_15

----------------------------------------------------------------------------------------------------
Mar 27, 2023

# About this section

In this section the following implementations of data conversion mechanism is going to be discussed:

- Formatters
- Property editors
- Converters

----------------------------------------------------------------------------------------------------
<!--index ["composite DTOs"]-->
# Adding internal DTOs

[[2.9][], [6:21](https://youtu.be/q9hjjeJA7Yw?t=381)]

A new DTO [`CommunicationDto`](
<!--wrap_java web-app-spring-adv2/src/main/java/springmvcstudy2/model/CommunicationDto.java-->)
is created and added as the field `communicationDto` in the [`RegistrationDto`](
<!--wrap_java web-app-spring-adv2/src/main/java/springmvcstudy2/model/RegistrationDto.java-->)
DTO.

[`PhoneDto`](
<!--wrap_java web-app-spring-adv2/src/main/java/springmvcstudy2/model/PhoneDto.java-->) is created
and added to the `CommunicationDto`. This DTO contains two fields `countryCode` and `userNumber`
but we will try to represent it in the view as a single text input field.

The views [`registration-page.jsp`](
<!--wrap_xml web-app-spring-adv2/src/main/webapp/view/registration-page.jsp-->)
and [`registration-success.jsp`](
<!--wrap_xml web-app-spring-adv2/src/main/webapp/view/registration-success.jsp-->)
are updated to reflect the corresponding fields.

In the view the email field is accessed the following way:

````xml
.  .  .
</p><label for="email">Email: </label><form:input id="email" path="communicationDto.email"/></p>
.  .  .
````

But this does not work for the `communicationDto.phone` field as it's not a `String`.
On the other hand the field `private int age;` is accepted successfully as Spring MVC can
automatically convert some known data types. The solution about the `phone` field is going to be 
discussed later.

> Git commit: [`8e67a743ed9bd4a6f84f8dec1d00123de0d5ef38`](
> <!--path patches-->8e67a743ed9bd4a6f84f8dec1d00123de0d5ef38.html)
> composite DTOs implemented

----------------------------------------------------------------------------------------------------
<!--index ["Formatter"]-->
# Introducing `Formatter`

[[2.9][], [35:27](https://youtu.be/q9hjjeJA7Yw?t=2127)]

The `org.springframework.format.Formatter` interface is used in Spring MVC and Spring Boot as well.

the implementation [`PhoneNumberFormatter`](
<!--wrap_java web-app-spring-adv2/src/main/java/springmvcstudy2/config/formatter/PhoneNumberFormatter.java-->)
is created:

````code
public class PhoneNumberFormatter implements Formatter<PhoneDto> {

    @Override
    public String print(PhoneDto object, Locale locale) {
        return null;
    }

    @Override
    public PhoneDto parse(String text, Locale locale) {
        System.out.println("inside PhoneNumberFormatter#parse");
        String[] split = text.replaceAll("\\s", "").split("-");
        PhoneDto phoneDto = new PhoneDto();
        phoneDto.setCountryCode(split[0]);
        phoneDto.setUserNumber(split[1]);
        return phoneDto;
    }
}
````

!!! note
    Spring MVC will only call the `parse()` method if the parsing is required. It will not call it
    if a user entered nothing to the corresponding field.

Looks like the `print()` method will not be used for converting from a `PhoneDto` to a `String`, so 
`PhoneDto#toString()` method is used instead:

````code
    @Override
    public String toString() {
        return this.getCountryCode() + "-" + this.getUserNumber();
    }
````

!!! note
    The `print()` method is used for the other purpose that is described 
    [here](<!--page formatters-->#using_print_method).

<!--index ["WebMvcConfigurer interface"]-->
To register a `Formatter` in the [`MyApplicationConfig`](
<!--wrap_java web-app-spring-adv2/src/main/java/springmvcstudy2/config/MyApplicationConfig.java-->)
configuration the configuration class must implement the interface
`org.springframework.web.servlet.config.annotation.WebMvcConfigurer`. The registration is done
like this:

````code
    @Override
    public void addFormatters(FormatterRegistry registry) {
        registry.addFormatter(new PhoneNumberFormatter());
    }
````

!!! note
    When an implementation of the `org.springframework.format.Parser#parse` method returns `null`
    a `NullPointerException` exception is output to the log.

The pictures are not going to be demonstrated as they are not changed very much. The previous 
versions od these forms can be view [here](<!--page registration_form-->#registration_forms).

> Git commit: [`ba324d4a9f5375be278136b3cdf3198fdeb968f6`](
> <!--path patches-->ba324d4a9f5375be278136b3cdf3198fdeb968f6.html)
> Spring NVC Formatter used

----------------------------------------------------------------------------------------------------
<a name="using_print_method"></a>
# Using the `print()` method

[[2.9][], [1:06:47](https://youtu.be/q9hjjeJA7Yw?t=4007)]

The print method is used when the form is populated with the model object that is already filled up,
e.g. taken from a database. For demonstration the controller method `showRegistrationPage` of
the controller [`RegistrationController`](
<!--wrap_java web-app-spring-adv2/src/main/java/springmvcstudy2/controllers/RegistrationController.java-->)
is changed to prepopulate the phone number:

````code
    @RequestMapping("/register")
    public String showRegistrationPage(@ModelAttribute("userReg") RegistrationDto userReg) {

        CommunicationDto communicationDto = new CommunicationDto();
        PhoneDto phoneDto = new PhoneDto();
        phoneDto.setCountryCode("000");
        phoneDto.setUserNumber("0000000000");
        communicationDto.setPhone(phoneDto);
        userReg.setCommunicationDto(communicationDto);

        return "registration-page";
    }
````

The `print()` method of the formatter [`PhoneNumberFormatter`](
<!--wrap_java web-app-spring-adv2/src/main/java/springmvcstudy2/config/formatter/PhoneNumberFormatter.java-->)
is changed like this:

````code
    @Override
    public String print(PhoneDto object, Locale locale) {
        return object.getCountryCode() + "-" + object.getUserNumber();
    }
````

So now when the form is initially loaded the phone number is "000-0000000000".

> Git commit: [`50c94fbb64875de6ee9617331b4dbf017e120919`](
> <!--path patches-->50c94fbb64875de6ee9617331b4dbf017e120919.html)
> formatter print() method demonstrated

----------------------------------------------------------------------------------------------------
# Using Locale

[[2.9][], [1:40:35](https://youtu.be/q9hjjeJA7Yw?t=6035)]

At this time stamp the money amount conversion and presentation is discussed, but it's not going
to be followed as it's a little bit out of scope of the current goals.

----------------------------------------------------------------------------------------------------
Mar 28, 2023

<!--index ["@InitBinder"]-->
# InitBinder introduction

[[2.11][], [5:30](https://youtu.be/ms4ywje7EYI?t=330)]

!!! note
    See [here](<!--page data_binding-->#controlleradvice_annotation) for information about using
    this annotation **globally**.

In the [`RegistrationController`](
<!--wrap_java web-app-spring-adv2/src/main/java/springmvcstudy2/controllers/RegistrationController.java-->)
class add the following method:

````code
    .  .  .
    @InitBinder
    public void initBinder(WebDataBinder dataBinder) {
        System.out.println("inside @InitBinder method");
        dataBinder.setDisallowedFields("name");
    }
    .  .  .
````

The annotation we use is `@org.springframework.web.bind.annotation.InitBinder`. 

This method will be called each time any request handler method of this controller is called.
In this example it removes the field named `name` from the data model.

!!! note
    Actually this field is sent in the URL
    `http://localhost:8080/web-app-spring-adv2/ui/registration-success?name=aaaaa&userName=bbbbb&...`,
    it's just not shown on the page.
    
> Git commit: [`1527bd366728db43257229b25a07075f2cafe129`](
> <!--path patches-->1527bd366728db43257229b25a07075f2cafe129.html)
> property editor basics
    
----------------------------------------------------------------------------------------------------
<!--index ["property editor"]-->
# Property editor

[[2.11][], [31:51](https://youtu.be/ms4ywje7EYI?t=1911)]

In the [`RegistrationController`](
<!--wrap_java web-app-spring-adv2/src/main/java/springmvcstudy2/controllers/RegistrationController.java-->)
class `@InitBinder` annotated method register a `StringTrimmerEditor`:

````code
    .  .  .
    @InitBinder
    public void initBinder(WebDataBinder dataBinder) {
        System.out.println("inside @InitBinder method");
        StringTrimmerEditor trimmerEditor = new StringTrimmerEditor(true);
        dataBinder.registerCustomEditor(String.class, "name", trimmerEditor);
    }
    .  .  .
````

Then the value of the `name` field will be trimmed. This is a simple example demonstrating the 
property editor concept.

If a text is entered into a text field that represent, for example, an integer model field, the 
property editing concept works for transformation. There's a default data binder that was
implicitly used in our previous examples. But just the simplest automatic data binding is 
activated by default. For more complex cases we need to write our custom data binders.

The `WebDataBinder` object allow us registering:

- custom editors;
- validators;
- "required" properties;
- allowed/disallowed properties.

----------------------------------------------------------------------------------------------------
# Built-in property editors

[[2.11][], [43:35](https://youtu.be/ms4ywje7EYI?t=2615)]

For the Built-in property editors list see [[15][], 
[3.3.2. Built-in `PropertyEditor` Implementations](
https://docs.spring.io/spring-framework/docs/5.3.9/reference/html/core.html#beans-beans-conversion)].

Some demonstration is done in the video about the property editor usage that are too long and
not so much important for the goals of this course.

----------------------------------------------------------------------------------------------------
# Writing a custom property editor

[[2.11][], [1:11:18](https://youtu.be/ms4ywje7EYI?t=4278)]

We are going to convert the "Name" field to upper case. It's pretty simple. First create a new 
property editor [`NamePropertyEditor`](
<!--wrap_java web-app-spring-adv2/src/main/java/springmvcstudy2/propertyeditor/NamePropertyEditor.java-->):

<!--index ["PropertyEditorSupport"]-->
````code
public class NamePropertyEditor extends PropertyEditorSupport {

    @Override
    public void setAsText(String text) throws IllegalArgumentException {
        setValue(text.toUpperCase());
    }
}
````

The `setValue()` method comes from the `java.beans.PropertyEditorSupport` base class.

!!! note
    The `PropertyEditorSupport` class has the method `getAsText()` that id analogous to the 
    method `print()` of the `Formatter` interface (see 
    [here](<!--page formatters-->#using_print_method)).

Then we just add the newly created property editor to the [`RegistrationController`](
<!--wrap_java web-app-spring-adv2/src/main/java/springmvcstudy2/controllers/RegistrationController.java-->)
class:

````code
    .  .  .
    @InitBinder
    public void initBinder(WebDataBinder dataBinder) {
        System.out.println("inside @InitBinder method");
        StringTrimmerEditor trimmerEditor = new StringTrimmerEditor(true);
        dataBinder.registerCustomEditor(String.class, "name", trimmerEditor);
        dataBinder.registerCustomEditor(String.class, "name", new NamePropertyEditor());
    }
    .  .  .
````

!!! note
    Looks like the previous `StringTrimmerEditor` property editor stops working after registering
    a new property editor.

> Git commit: [`c79fdca26537262bbae1c0de5f2e54955cb425f2`](
> <!--path patches-->c79fdca26537262bbae1c0de5f2e54955cb425f2.html)
> custom property editor implemented

----------------------------------------------------------------------------------------------------
<!--index Converter interface--><a name="converter_interface"></a>
# `Converter` interface

[[2.11][], [1:52:49](https://youtu.be/ms4ywje7EYI?t=6769)]

There's yet another mechanism for converting --- the parameterized
`org.springframework.core.convert.converter.Converter` interface that has the `convert()` method
that concrete converters must override and where actual conversion is performed.
The converters must be added in the configuration class like [`MyApplicationConfig`](
<!--wrap_java web-app-spring-adv2/src/main/java/springmvcstudy2/config/MyApplicationConfig.java-->)
in the `addFormatters()` method using the `FormatterRegistry#addConverter` method.

The `Converter` interface has only a one-way conversion method. For the reverse conversion another 
converter must be created.





