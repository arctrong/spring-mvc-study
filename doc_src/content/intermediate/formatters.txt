<!--VARIABLES {"title": "Spring MVC Formatter", "SORT_ORDER": "060", "code": "formatters"}-->

[TOC]

[2.9]: <!--page refs-->#ref_2_9

----------------------------------------------------------------------------------------------------
Mar 27, 2023

<!--index ["composite DTOs"]-->
# Adding internal DTOs

[[2.9][], [6:21](https://youtu.be/q9hjjeJA7Yw?t=381)]

A new DTO [`CommunicationDto`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/model/CommunicationDto.java)
is created and added as the field `communicationDto` in the [`RegistrationDto`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/model/RegistrationDto.java)
DTO.

[`PhoneDto`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/model/PhoneDto.java) is created
and added to the `CommunicationDto`. This DTO contains two fields `countryCode` and `userNumber`
but we will try to represent it in the view as a single text input field.

The views [`registration-page.jsp`](
<!--path code-->web-app-spring-adv2/src/main/webapp/view/registration-page.jsp)
and [`registration-success.jsp`](
<!--path code-->web-app-spring-adv2/src/main/webapp/view/registration-success.jsp)
are updated to reflect the corresponding fields.

In the view the email field is accessed the following way:

````xml
.  .  .
</p><label for="email">Email: </label><form:input id="email" path="communicationDto.email"/></p>
.  .  .
````

But this does not work for the `communicationDto.phone` field as it's not a `String`.
On the other hand the field `private int age;` is accepted successfully as Spring MVC can
automatically convert some known data types. The solution about the `phone` field is going to be 
discussed later.

> Git commit: `5a14f9a34017c2c5e63c04cf25ec035718df987d` composite DTOs implemented

----------------------------------------------------------------------------------------------------
<!--index ["Formatter"]-->
# Introducing `Formatter`

[[2.9][], [35:27](https://youtu.be/q9hjjeJA7Yw?t=2127)]

The `org.springframework.format.Formatter` interface is used in Spring MVC and Spring Boot as well.

the implementation [`PhoneNumberFormatter`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/config/formatter/PhoneNumberFormatter.java)
is created:

````code
public class PhoneNumberFormatter implements Formatter<PhoneDto> {

    @Override
    public String print(PhoneDto object, Locale locale) {
        return null;
    }

    @Override
    public PhoneDto parse(String text, Locale locale) {
        System.out.println("inside PhoneNumberFormatter#parse");
        String[] split = text.replaceAll("\\s", "").split("-");
        PhoneDto phoneDto = new PhoneDto();
        phoneDto.setCountryCode(split[0]);
        phoneDto.setUserNumber(split[1]);
        return phoneDto;
    }
}
````

!!! note
    Spring MVC will only call the `parse()` method if the parsing is required. It will not call it
    if a user entered nothing to the corresponding field.

Looks like the `print()` method will not be used for converting from a `PhoneDto` to a `String`, so 
`PhoneDto#toString()` method is used instead:

````code
    @Override
    public String toString() {
        return this.getCountryCode() + "-" + this.getUserNumber();
    }
````

!!! note
    The `print()` method is used for the other purpose that is described 
    [here](<!--page formatters-->#using_print_mathod).

<!--index ["WebMvcConfigurer interface"]-->
To register a `Formatter` in the [`MyApplicationConfig`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/config/MyApplicationConfig.java)
configuration the configuration class must implement the interface
`org.springframework.web.servlet.config.annotation.WebMvcConfigurer`. The registration is done
like this:

````code
    @Override
    public void addFormatters(FormatterRegistry registry) {
        registry.addFormatter(new PhoneNumberFormatter());
    }
````

!!! note
    When an implementation of the `org.springframework.format.Parser#parse` method returns `null`
    a `NullPointerException` exception is output to the log.

The pictures are not going to be demonstrated as they are not changed very much. The previous 
versions od these forms can be view [here](<!--page registration_form-->#registration_forms).

> Git commit: `5d9d526ce3ef71d5d231c5d1e2230ff77e4c50c3` Spring NVC Formatter used

----------------------------------------------------------------------------------------------------
<a name="using_print_mathod"></a>
# Using the `print()` method

[[2.9][], [1:06:47](https://youtu.be/q9hjjeJA7Yw?t=4007)]

The print method is used when the form is populated with the model object that is already filled up,
e.g. taken from a database. For demonstration the controller method `showRegistrationPage` of
the controller [`RegistrationController`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/controllers/RegistrationController.java)
is changed to prepopulate the phone number:

````code
    @RequestMapping("/register")
    public String showRegistrationPage(@ModelAttribute("userReg") RegistrationDto userReg) {

        CommunicationDto communicationDto = new CommunicationDto();
        PhoneDto phoneDto = new PhoneDto();
        phoneDto.setCountryCode("000");
        phoneDto.setUserNumber("0000000000");
        communicationDto.setPhone(phoneDto);
        userReg.setCommunicationDto(communicationDto);

        return "registration-page";
    }
````

The `print()` method of the formatter [`PhoneNumberFormatter`](
<!--path code-->web-app-spring-adv2/src/main/java/springmvcstudy2/config/formatter/PhoneNumberFormatter.java)
is changed like this:

````code
    @Override
    public String print(PhoneDto object, Locale locale) {
        return object.getCountryCode() + "-" + object.getUserNumber();
    }
````

So now when the form is initially loaded the phone number is "000-0000000000".

> Git commit: `8d937092461422607d8595e0eb3c91ad7db42a56` formatter print() method demonstrated

----------------------------------------------------------------------------------------------------
# Using Locale

[[2.9][], [1:40:35](https://youtu.be/q9hjjeJA7Yw?t=6035)]

At this time stamp the money amount conversion and presentation is discussed, but it's not going
to be followed as it's a little bit out of scope of the current goals.





